// tslint:disable
/**
 * SCPExC
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl  from 'url-polyfill';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * TradeControllerApi - axios parameter creator
 * @export
 */
export const TradeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary updateAddress
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeAddrPost: async (authorization: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiTradeAddrPost.');
            }
            const localVarPath = `/api/trade/addr`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addToCart
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCartAddPost: async (authorization: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiTradeCartAddPost.');
            }
            const localVarPath = `/api/trade/cart/add`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCart
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCartUpdatePost: async (authorization: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiTradeCartUpdatePost.');
            }
            const localVarPath = `/api/trade/cart/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createContractNegotiation
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCnCreatePost: async (authorization: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiTradeCnCreatePost.');
            }
            const localVarPath = `/api/trade/cn/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPagedCNs
         * @param {number} pageNum 
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCnListPageNumPost: async (pageNum: number, authorization: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNum' is not null or undefined
            if (pageNum === null || pageNum === undefined) {
                throw new RequiredError('pageNum','Required parameter pageNum was null or undefined when calling apiTradeCnListPageNumPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiTradeCnListPageNumPost.');
            }
            const localVarPath = `/api/trade/cn/list/{pageNum}`
                .replace(`{${"pageNum"}}`, encodeURIComponent(String(pageNum)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCN
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCnUpdatePost: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trade/cn/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createTrade
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCreatePost: async (authorization: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiTradeCreatePost.');
            }
            const localVarPath = `/api/trade/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary queryTrades
         * @param {number} page 
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeTradesQueryPagePost: async (page: number, authorization: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling apiTradeTradesQueryPagePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiTradeTradesQueryPagePost.');
            }
            const localVarPath = `/api/trade/trades/query/{page}`
                .replace(`{${"page"}}`, encodeURIComponent(String(page)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateTransaction
         * @param {number} transactionId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeTradesUpdateTransactionIdPost: async (transactionId: number, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId','Required parameter transactionId was null or undefined when calling apiTradeTradesUpdateTransactionIdPost.');
            }
            const localVarPath = `/api/trade/trades/update/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradeControllerApi - functional programming interface
 * @export
 */
export const TradeControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary updateAddress
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTradeAddrPost(authorization: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TradeControllerApiAxiosParamCreator(configuration).apiTradeAddrPost(authorization, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary addToCart
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTradeCartAddPost(authorization: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TradeControllerApiAxiosParamCreator(configuration).apiTradeCartAddPost(authorization, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCart
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTradeCartUpdatePost(authorization: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TradeControllerApiAxiosParamCreator(configuration).apiTradeCartUpdatePost(authorization, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createContractNegotiation
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTradeCnCreatePost(authorization: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TradeControllerApiAxiosParamCreator(configuration).apiTradeCnCreatePost(authorization, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getPagedCNs
         * @param {number} pageNum 
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTradeCnListPageNumPost(pageNum: number, authorization: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TradeControllerApiAxiosParamCreator(configuration).apiTradeCnListPageNumPost(pageNum, authorization, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCN
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTradeCnUpdatePost(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TradeControllerApiAxiosParamCreator(configuration).apiTradeCnUpdatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createTrade
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTradeCreatePost(authorization: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TradeControllerApiAxiosParamCreator(configuration).apiTradeCreatePost(authorization, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary queryTrades
         * @param {number} page 
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTradeTradesQueryPagePost(page: number, authorization: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TradeControllerApiAxiosParamCreator(configuration).apiTradeTradesQueryPagePost(page, authorization, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateTransaction
         * @param {number} transactionId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTradeTradesUpdateTransactionIdPost(transactionId: number, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TradeControllerApiAxiosParamCreator(configuration).apiTradeTradesUpdateTransactionIdPost(transactionId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TradeControllerApi - factory interface
 * @export
 */
export const TradeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary updateAddress
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeAddrPost(authorization: string, body?: string, options?: any): AxiosPromise<string> {
            return TradeControllerApiFp(configuration).apiTradeAddrPost(authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addToCart
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCartAddPost(authorization: string, body?: string, options?: any): AxiosPromise<string> {
            return TradeControllerApiFp(configuration).apiTradeCartAddPost(authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCart
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCartUpdatePost(authorization: string, body?: string, options?: any): AxiosPromise<string> {
            return TradeControllerApiFp(configuration).apiTradeCartUpdatePost(authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createContractNegotiation
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCnCreatePost(authorization: string, body?: string, options?: any): AxiosPromise<string> {
            return TradeControllerApiFp(configuration).apiTradeCnCreatePost(authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPagedCNs
         * @param {number} pageNum 
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCnListPageNumPost(pageNum: number, authorization: string, body?: string, options?: any): AxiosPromise<string> {
            return TradeControllerApiFp(configuration).apiTradeCnListPageNumPost(pageNum, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCN
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCnUpdatePost(body?: string, options?: any): AxiosPromise<string> {
            return TradeControllerApiFp(configuration).apiTradeCnUpdatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createTrade
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeCreatePost(authorization: string, body?: string, options?: any): AxiosPromise<string> {
            return TradeControllerApiFp(configuration).apiTradeCreatePost(authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary queryTrades
         * @param {number} page 
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeTradesQueryPagePost(page: number, authorization: string, body?: string, options?: any): AxiosPromise<string> {
            return TradeControllerApiFp(configuration).apiTradeTradesQueryPagePost(page, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateTransaction
         * @param {number} transactionId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTradeTradesUpdateTransactionIdPost(transactionId: number, body?: string, options?: any): AxiosPromise<string> {
            return TradeControllerApiFp(configuration).apiTradeTradesUpdateTransactionIdPost(transactionId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TradeControllerApi - interface
 * @export
 * @interface TradeControllerApi
 */
export interface TradeControllerApiInterface {
    /**
     * 
     * @summary updateAddress
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApiInterface
     */
    apiTradeAddrPost(authorization: string, body?: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary addToCart
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApiInterface
     */
    apiTradeCartAddPost(authorization: string, body?: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary updateCart
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApiInterface
     */
    apiTradeCartUpdatePost(authorization: string, body?: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary createContractNegotiation
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApiInterface
     */
    apiTradeCnCreatePost(authorization: string, body?: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary getPagedCNs
     * @param {number} pageNum 
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApiInterface
     */
    apiTradeCnListPageNumPost(pageNum: number, authorization: string, body?: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary updateCN
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApiInterface
     */
    apiTradeCnUpdatePost(body?: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary createTrade
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApiInterface
     */
    apiTradeCreatePost(authorization: string, body?: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary queryTrades
     * @param {number} page 
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApiInterface
     */
    apiTradeTradesQueryPagePost(page: number, authorization: string, body?: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary updateTransaction
     * @param {number} transactionId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApiInterface
     */
    apiTradeTradesUpdateTransactionIdPost(transactionId: number, body?: string, options?: any): AxiosPromise<string>;

}

/**
 * TradeControllerApi - object-oriented interface
 * @export
 * @class TradeControllerApi
 * @extends {BaseAPI}
 */
export class TradeControllerApi extends BaseAPI implements TradeControllerApiInterface {
    /**
     * 
     * @summary updateAddress
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApi
     */
    public apiTradeAddrPost(authorization: string, body?: string, options?: any) {
        return TradeControllerApiFp(this.configuration).apiTradeAddrPost(authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addToCart
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApi
     */
    public apiTradeCartAddPost(authorization: string, body?: string, options?: any) {
        return TradeControllerApiFp(this.configuration).apiTradeCartAddPost(authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCart
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApi
     */
    public apiTradeCartUpdatePost(authorization: string, body?: string, options?: any) {
        return TradeControllerApiFp(this.configuration).apiTradeCartUpdatePost(authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createContractNegotiation
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApi
     */
    public apiTradeCnCreatePost(authorization: string, body?: string, options?: any) {
        return TradeControllerApiFp(this.configuration).apiTradeCnCreatePost(authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPagedCNs
     * @param {number} pageNum 
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApi
     */
    public apiTradeCnListPageNumPost(pageNum: number, authorization: string, body?: string, options?: any) {
        return TradeControllerApiFp(this.configuration).apiTradeCnListPageNumPost(pageNum, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCN
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApi
     */
    public apiTradeCnUpdatePost(body?: string, options?: any) {
        return TradeControllerApiFp(this.configuration).apiTradeCnUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createTrade
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApi
     */
    public apiTradeCreatePost(authorization: string, body?: string, options?: any) {
        return TradeControllerApiFp(this.configuration).apiTradeCreatePost(authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary queryTrades
     * @param {number} page 
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApi
     */
    public apiTradeTradesQueryPagePost(page: number, authorization: string, body?: string, options?: any) {
        return TradeControllerApiFp(this.configuration).apiTradeTradesQueryPagePost(page, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateTransaction
     * @param {number} transactionId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeControllerApi
     */
    public apiTradeTradesUpdateTransactionIdPost(transactionId: number, body?: string, options?: any) {
        return TradeControllerApiFp(this.configuration).apiTradeTradesUpdateTransactionIdPost(transactionId, body, options).then((request) => request(this.axios, this.basePath));
    }

}
