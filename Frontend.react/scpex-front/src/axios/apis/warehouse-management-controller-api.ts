// tslint:disable
/**
 * SCPExC
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl  from 'url-polyfill';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * WarehouseManagementControllerApi - axios parameter creator
 * @export
 */
export const WarehouseManagementControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary giveUpCat
         * @param {number} id 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseCatDisableIdPost: async (id: number, authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWarehouseCatDisableIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiWarehouseCatDisableIdPost.');
            }
            const localVarPath = `/api/warehouse/cat/disable/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseCatIdPost: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWarehouseCatIdPost.');
            }
            const localVarPath = `/api/warehouse/cat/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listCat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseCatListPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/warehouse/cat/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary newCat
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseCatNewPost: async (authorization: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiWarehouseCatNewPost.');
            }
            const localVarPath = `/api/warehouse/cat/new`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTraders
         * @param {string} page 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseFindPagePost: async (page: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling apiWarehouseFindPagePost.');
            }
            const localVarPath = `/api/warehouse/find/{page}`
                .replace(`{${"page"}}`, encodeURIComponent(String(page)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getProduct
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseIdPost: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWarehouseIdPost.');
            }
            const localVarPath = `/api/warehouse/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary controls
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseOpPost: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/warehouse/op`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WarehouseManagementControllerApi - functional programming interface
 * @export
 */
export const WarehouseManagementControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary giveUpCat
         * @param {number} id 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWarehouseCatDisableIdPost(id: number, authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await WarehouseManagementControllerApiAxiosParamCreator(configuration).apiWarehouseCatDisableIdPost(id, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWarehouseCatIdPost(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await WarehouseManagementControllerApiAxiosParamCreator(configuration).apiWarehouseCatIdPost(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listCat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWarehouseCatListPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await WarehouseManagementControllerApiAxiosParamCreator(configuration).apiWarehouseCatListPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary newCat
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWarehouseCatNewPost(authorization: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await WarehouseManagementControllerApiAxiosParamCreator(configuration).apiWarehouseCatNewPost(authorization, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getTraders
         * @param {string} page 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWarehouseFindPagePost(page: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await WarehouseManagementControllerApiAxiosParamCreator(configuration).apiWarehouseFindPagePost(page, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getProduct
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWarehouseIdPost(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await WarehouseManagementControllerApiAxiosParamCreator(configuration).apiWarehouseIdPost(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary controls
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWarehouseOpPost(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await WarehouseManagementControllerApiAxiosParamCreator(configuration).apiWarehouseOpPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WarehouseManagementControllerApi - factory interface
 * @export
 */
export const WarehouseManagementControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary giveUpCat
         * @param {number} id 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseCatDisableIdPost(id: number, authorization: string, options?: any): AxiosPromise<string> {
            return WarehouseManagementControllerApiFp(configuration).apiWarehouseCatDisableIdPost(id, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseCatIdPost(id: number, options?: any): AxiosPromise<string> {
            return WarehouseManagementControllerApiFp(configuration).apiWarehouseCatIdPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listCat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseCatListPost(options?: any): AxiosPromise<string> {
            return WarehouseManagementControllerApiFp(configuration).apiWarehouseCatListPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary newCat
         * @param {string} authorization 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseCatNewPost(authorization: string, body?: string, options?: any): AxiosPromise<string> {
            return WarehouseManagementControllerApiFp(configuration).apiWarehouseCatNewPost(authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getTraders
         * @param {string} page 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseFindPagePost(page: string, body?: string, options?: any): AxiosPromise<string> {
            return WarehouseManagementControllerApiFp(configuration).apiWarehouseFindPagePost(page, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getProduct
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseIdPost(id: string, options?: any): AxiosPromise<string> {
            return WarehouseManagementControllerApiFp(configuration).apiWarehouseIdPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary controls
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWarehouseOpPost(body?: string, options?: any): AxiosPromise<string> {
            return WarehouseManagementControllerApiFp(configuration).apiWarehouseOpPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WarehouseManagementControllerApi - interface
 * @export
 * @interface WarehouseManagementControllerApi
 */
export interface WarehouseManagementControllerApiInterface {
    /**
     * 
     * @summary giveUpCat
     * @param {number} id 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApiInterface
     */
    apiWarehouseCatDisableIdPost(id: number, authorization: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary getCat
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApiInterface
     */
    apiWarehouseCatIdPost(id: number, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary listCat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApiInterface
     */
    apiWarehouseCatListPost(options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary newCat
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApiInterface
     */
    apiWarehouseCatNewPost(authorization: string, body?: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary getTraders
     * @param {string} page 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApiInterface
     */
    apiWarehouseFindPagePost(page: string, body?: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary getProduct
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApiInterface
     */
    apiWarehouseIdPost(id: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary controls
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApiInterface
     */
    apiWarehouseOpPost(body?: string, options?: any): AxiosPromise<string>;

}

/**
 * WarehouseManagementControllerApi - object-oriented interface
 * @export
 * @class WarehouseManagementControllerApi
 * @extends {BaseAPI}
 */
export class WarehouseManagementControllerApi extends BaseAPI implements WarehouseManagementControllerApiInterface {
    /**
     * 
     * @summary giveUpCat
     * @param {number} id 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApi
     */
    public apiWarehouseCatDisableIdPost(id: number, authorization: string, options?: any) {
        return WarehouseManagementControllerApiFp(this.configuration).apiWarehouseCatDisableIdPost(id, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCat
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApi
     */
    public apiWarehouseCatIdPost(id: number, options?: any) {
        return WarehouseManagementControllerApiFp(this.configuration).apiWarehouseCatIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listCat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApi
     */
    public apiWarehouseCatListPost(options?: any) {
        return WarehouseManagementControllerApiFp(this.configuration).apiWarehouseCatListPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary newCat
     * @param {string} authorization 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApi
     */
    public apiWarehouseCatNewPost(authorization: string, body?: string, options?: any) {
        return WarehouseManagementControllerApiFp(this.configuration).apiWarehouseCatNewPost(authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getTraders
     * @param {string} page 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApi
     */
    public apiWarehouseFindPagePost(page: string, body?: string, options?: any) {
        return WarehouseManagementControllerApiFp(this.configuration).apiWarehouseFindPagePost(page, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getProduct
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApi
     */
    public apiWarehouseIdPost(id: string, options?: any) {
        return WarehouseManagementControllerApiFp(this.configuration).apiWarehouseIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary controls
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseManagementControllerApi
     */
    public apiWarehouseOpPost(body?: string, options?: any) {
        return WarehouseManagementControllerApiFp(this.configuration).apiWarehouseOpPost(body, options).then((request) => request(this.axios, this.basePath));
    }

}
